package be.nascom.air.util{		import adobe.utils.ProductManager;		import flash.display.Loader;	import flash.display.MovieClip;	import flash.events.Event;	import flash.events.IOErrorEvent;	import flash.events.MouseEvent;	import flash.events.TimerEvent;	import flash.net.URLRequest;	import flash.text.TextField;	import flash.utils.Timer;		public class AIRInstallUtil extends MovieClip 	{		public static const AIR_SWF_URL:String = "http://airdownload.adobe.com/air/browserapi/air.swf";		public static const VALID_PROTOCOLS:Array = ["http","https"];				protected var _callToActionButton:MovieClip;		protected var _callToActionField:TextField;		protected var _feedbackTitleField:TextField;		protected var _feedbackContentField:TextField;		protected var _requiredAirVersion:String;				protected var _appInstallArg:Array;		protected var _appLaunchArg:Array;		protected var _appID:String;		protected var _appName:String;		protected var _appURL:String;		protected var _appVersion:String;		protected var _pubID:String;				protected var installed_requiredAirVersion:String;		protected var airSWFLoader:Loader;		protected var airSWF:Object;		protected var action:String;		protected var prevAction:String;		protected var timer:Timer;		protected var productManager:ProductManager;			public function AIRInstallUtil(actionfield:TextField, actionButton:MovieClip, titleField:TextField, contentField:TextField) 		{				this._callToActionField = actionfield;			this._callToActionButton = actionButton;			this._feedbackTitleField = titleField;			this._feedbackContentField = contentField;		}				public function init(appID:String, appName:String, appURL:String, appVersion:String, pubID:String, requiredAirVersion:String="1.0", appInstallArg:Array=null, appLaunchArg:Array=null):void		{			// set up the timer that will be used to check for installation progress:			timer = new Timer(10000,0);			timer.addEventListener(TimerEvent.TIMER,handleTimer);						// set up a product manager for AIR:			productManager = new ProductManager('airappinstaller' );						this._requiredAirVersion = requiredAirVersion;			this._appInstallArg = appInstallArg;			this._appLaunchArg = appLaunchArg;			this._appID = appID;			this._appName = appName;			this._appURL = appURL;			this._appVersion = appVersion;			this._pubID = pubID;						// verify all required params are accounted for:			if (!verifyParams()) {				showDialog(getText("error"),getText("err_params"));				_callToActionField.text = "";				return;			}						// strip tags out of the _appName:			_appName = _appName.replace(/(<.*?>|<)/g,"");									// load the AIR proxy swf:			airSWFLoader = new Loader();			airSWFLoader.contentLoaderInfo.addEventListener(IOErrorEvent.IO_ERROR,handleAIRSWFError);			airSWFLoader.contentLoaderInfo.addEventListener(Event.COMPLETE, handleAIRSWFInit);			try {				airSWFLoader.load(new URLRequest(AIR_SWF_URL))//, loaderContext);			} catch (e:*) {				handleAIRSWFError(null);			}		}					// called when there is an error loading the airSWF		protected function handleAIRSWFError(evt:IOErrorEvent):void {			showDialog(getText("error"),getText("err_airswf"));			_callToActionField.text = "";		}				// called when the airSWF loads and inits		protected function handleAIRSWFInit(evt:Event):void {			airSWF = airSWFLoader.content;			if (airSWF.getStatus() == "unavailable") {				showDialog(getText("error"),getText("err_airunavailable"));				return;			}			var version:String = null;			if (_appID && _pubID) {				// check if the application is already installed:				try {					airSWF.getApplicationVersion(_appID, _pubID, _appVersionCallback);					return;				} catch (e:*) {}			}			enableAction("install");		}				// callback from the airSWF when requesting application version		protected function _appVersionCallback(version:String):void {			if (version == null) {				// application is not installed				enableAction("install");			} else if (_appVersion && (checkVersion(_appVersion,version)==1)) {				// old version is installed				enableAction("upgrade");			} else {				// current version is probably installed				enableAction("launch");			}		}				// handles clicks on the action button		protected function handleActionClick(evt:MouseEvent):void {			if (action == "close") {				hideDialog();				enableAction(prevAction);			} else if (action == "install" || action == "upgrade" || action == "tryagain") {				showDialog(getText("installing"),getText("installingtext"));				disableAction();				// check if it's installed every 5 seconds:				timer.reset();				timer.start();				airSWF.installApplication(_appURL, _requiredAirVersion, _appInstallArg);			} else if (action == "launch") {				airSWF.launchApplication(_appID, _pubID, _appLaunchArg);				showDialog(getText("launching"),getText("launchingtext"));				enableAction("close");			}		}				// triggered  every 5 seconds after installing or upgrading.		// checks to see if the expected version of the application was successfully installed.		protected function handleTimer(evt:TimerEvent):void {			try {				airSWF.getApplicationVersion(_appID, _pubID, tryAgainVersionCallback);			} catch (e:*) {				enableAction("tryagain");			}		}				// call back from version check in handleTimer		// verifies that version is _appVersion, and provides option to launch the app if it is.		protected function tryAgainVersionCallback(version:String):void {			if (version != null && (_appVersion == null || !(checkVersion(_appVersion,version)==1))) {				// current version is probably installed				timer.stop();				enableAction("launch");			} else {				enableAction("tryagain");			}		}				// show help		protected function handleHelpClick(evt:MouseEvent):void {			showDialog(getText("help"),getText("helptext"));			enableAction("close");		}				// enables the action button with the appropriate label, and sets the action property		protected function enableAction(action:String):void {			if (action == null) {				disableAction();				_callToActionField.text = getText("loading");				prevAction = null;			} else {				if (this.action != "close") { prevAction = this.action; }				_callToActionButton.addEventListener(MouseEvent.CLICK,handleActionClick);				_callToActionButton.buttonMode = true;				_callToActionField.alpha = 1;				_callToActionField.text = getText(action);			}			this.action = action;		}				// disables the action button		protected function disableAction():void {			_callToActionButton.removeEventListener(MouseEvent.CLICK,handleActionClick);			_callToActionButton.buttonMode = false;			_callToActionField.alpha = 0.2;		}				// shows the dialog, and hides the help button		protected function showDialog(title:String,content:String):void {			_feedbackTitleField.text = title;			_feedbackContentField.htmlText = content;		}				// hides the dialog, and shows the help button		protected function hideDialog():void {//			dialog.visible = false;			_feedbackTitleField.text = "";			_feedbackContentField.htmlText = "";		}				// return if all required parameters are present, false if not:		protected function verifyParams():Boolean {			return !(_appName == null || _appURL == null || _requiredAirVersion == null);		}				// return null if not a valid URL, only allow HTTP, HTTPS scheme or relative path		protected function validateURL(url:String):String {			if (url == null) { return null; }			var markerIndex:int = url.search(/:|%3a/i);			if (markerIndex > 0) {				var scheme:String = url.substr(0, markerIndex).toLowerCase();				if (VALID_PROTOCOLS.indexOf(scheme) == -1) { return null; }			}			if (url.indexOf("<") >= 0 || url.indexOf(">") >= 0) {				return null;			}			return url;		}				// returns null if the string is empty or null.		protected function validateString(str:String):String {			return (str == null || str.length < 1 || str.indexOf("<") >= 0 || str.indexOf(">") >= 0) ? null : str;		}				protected function getText(strCode:String):String {			switch (strCode) {				case "error": return "Error!";				case "err_params": return "Invalid installer parameters.";				case "err_airunavailable": return "Adobe® AIR™ is not available for your system.";				case "err_airswf": return "Unable to load the Adobe® AIR™ Browser API swf.";				case "loading": return "Loading...";				case "install": return "Install Now";				case "launch": return "Launch Now";				case "upgrade": return "Upgrade Now";				case "close": return "Close";				case "launching": return "Launching Application";				case "launchingtext": return "Please wait while the application launches.";				case "installing": return "Installing Application";				case "installingtext": return "Please wait while the application installs.";				case "tryagain": return "Try Again";				case "help": return "Help";				case "helptext": return getHelpText();			}			return "";		}				// assembles help text based on the current badge state.		// ex. Click the 'Install Now' button to install My Fun Application. The Adobe® AIR™ runtime will be installed automatically.		protected function getHelpText():String {			var helpText:String = "Click the '"+getText(action)+"' button to "+action+" "+_appName;			if (action == "upgrade") { helpText += " to version "+_appVersion; }			else if (action == "install") { helpText += ". The Adobe® AIR™ Runtime will be installed automatically if needed"; }			helpText += ".";			return helpText;		}				// returns true if the first version number is greater than the second, or false if it is lesser or indeterminate:		// works with most common versions strings: ex. 1.0.2.27 < 1.0.3.2, 1.0b3 < 1.0b5, 1.0a12 < 1.0b7, 1.0b3 < 1.0		protected function checkVersion(v1:String,v2:String):int {			var arr1:Array = v1.replace(/^v/i,"").match(/\d+|[^\.,\d\s]+/ig);			var arr2:Array = v2.replace(/^v/i,"").match(/\d+|[^\.,\d\s]+/ig);			var l:uint = Math.max(arr1.length,arr2.length);			for (var i:uint=0; i<l; i++) {				var sub:int = checkSubVersion(arr1[i],arr2[i])				if (sub == 0) { continue; }				return sub;			}			return 0;		}				// return 1 if the sub version element v1 is greater than v2, -1 if v2 is greater than v1, and 0 if they are equal		protected function checkSubVersion(v1:String,v2:String):int {			v1 = (v1 == null) ? "" : v1.toUpperCase();			v2 = (v2 == null) ? "" : v2.toUpperCase();						if (v1 == v2) { return 0; }			var num1:Number = parseInt(v1);			var num2:Number = parseInt(v2);			if (isNaN(num2) && isNaN(num1)) {				return (v1 == "") ? 1 : (v2 == "") ? -1 : (v1 > v2) ? 1 : -1;			}			else if (isNaN(num2)) { return 1; }			else if (isNaN(num1)) { return -1; }			else { return (num1 > num2) ? 1 : -1; }		}	}}